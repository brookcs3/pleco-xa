---
// src/components/ScrollAudio.astro
import { AWaves } from './AWaves.astro';

export interface Props {
  loop1Url: string;
  loop2Url: string;
  className?: string;
}

const { loop1Url, loop2Url, className = '' } = Astro.props;
---

<div class={`scroll-audio-container ${className}`} data-scroll-audio>
  <!-- Page 1: Loop 1 Territory -->
  <section class="scroll-page page-1" data-page="1">
    <div class="loop-info">
      <h2>Loop 1</h2>
      <div class="audio-status">
        <span class="status-indicator active">MASTER</span>
        <span class="volume-level">100%</span>
        <span class="filter-status">Full Spectrum</span>
      </div>
    </div>
    
    <!-- AWaves visualizer for Loop 1 -->
    <div class="visualizer-container">
      <AWaves id="awaves-loop1" />
    </div>
  </section>

  <!-- Page 2: Transition Zone -->
  <section class="scroll-page page-2 transition-zone" data-page="2">
    <div class="transition-info">
      <h2>Transition Zone</h2>
      <div class="crossfade-indicator">
        <div class="loop-1-bar"></div>
        <div class="loop-2-bar"></div>
        <div class="crossover-point"></div>
      </div>
      
      <div class="effect-status">
        <div class="doppler-indicator">
          <span>Doppler Effect</span>
          <div class="doppler-visual"></div>
        </div>
        
        <div class="filter-indicators">
          <div class="filter-1">
            <span>Loop 1: Highpass</span>
            <div class="filter-graph highpass"></div>
          </div>
          <div class="filter-2">
            <span>Loop 2: Lowpass</span>
            <div class="filter-graph lowpass"></div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Dual visualizers during transition -->
    <div class="dual-visualizers">
      <AWaves id="awaves-transition" />
    </div>
  </section>

  <!-- Page 3: Loop 2 Territory -->
  <section class="scroll-page page-3" data-page="3">
    <div class="loop-info">
      <h2>Loop 2</h2>
      <div class="audio-status">
        <span class="status-indicator active">MASTER</span>
        <span class="volume-level">100%</span>
        <span class="filter-status">Full Spectrum</span>
      </div>
    </div>
    
    <!-- AWaves visualizer for Loop 2 -->
    <div class="visualizer-container">
      <AWaves id="awaves-loop2" />
    </div>
  </section>

  <!-- Hidden audio elements -->
  <audio id="loop1-audio" src={loop1Url} loop preload="auto"></audio>
  <audio id="loop2-audio" src={loop2Url} loop preload="auto"></audio>
  
  <!-- Scroll progress indicator -->
  <div class="scroll-progress-indicator">
    <div class="progress-track">
      <div class="progress-fill"></div>
      <div class="zone-markers">
        <span class="marker" data-position="0">Loop 1</span>
        <span class="marker" data-position="33">Transition</span>
        <span class="marker" data-position="66">Loop 2</span>
      </div>
    </div>
  </div>
</div>

<style>
  .scroll-audio-container {
    position: relative;
    min-height: 300vh; /* 3 pages worth of scroll */
  }

  .scroll-page {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 2rem;
    position: relative;
  }

  /* Page 1 Styling */
  .page-1 {
    background: linear-gradient(135deg, #667eea, #764ba2);
  }

  /* Transition Zone */
  .page-2 {
    background: linear-gradient(135deg, #f093fb, #f5576c);
  }

  /* Page 3 Styling */
  .page-3 {
    background: linear-gradient(135deg, #4facfe, #00f2fe);
  }

  .loop-info {
    text-align: center;
    margin-bottom: 2rem;
  }

  .loop-info h2 {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: white;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
  }

  .audio-status {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .audio-status span {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .status-indicator.active {
    background: #ff6b6b;
    color: white;
    font-weight: bold;
  }

  /* Transition Zone Specific */
  .transition-info {
    text-align: center;
    width: 100%;
    max-width: 800px;
  }

  .crossfade-indicator {
    position: relative;
    height: 60px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 30px;
    margin: 2rem 0;
    overflow: hidden;
  }

  .loop-1-bar, .loop-2-bar {
    position: absolute;
    height: 100%;
    transition: width 0.3s ease;
  }

  .loop-1-bar {
    left: 0;
    background: linear-gradient(90deg, #667eea, #764ba2);
    width: 50%;
  }

  .loop-2-bar {
    right: 0;
    background: linear-gradient(90deg, #4facfe, #00f2fe);
    width: 50%;
  }

  .crossover-point {
    position: absolute;
    left: 50%;
    top: 0;
    width: 2px;
    height: 100%;
    background: white;
    transform: translateX(-50%);
  }

  /* Effect Status */
  .effect-status {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  .doppler-indicator {
    text-align: center;
  }

  .doppler-visual {
    height: 40px;
    background: linear-gradient(90deg, 
      transparent 0%, 
      rgba(255, 255, 255, 0.3) 25%, 
      rgba(255, 255, 255, 0.6) 50%, 
      rgba(255, 255, 255, 0.3) 75%, 
      transparent 100%);
    border-radius: 20px;
    margin-top: 0.5rem;
    animation: doppler-wave 2s infinite;
  }

  @keyframes doppler-wave {
    0% { transform: scaleX(1); }
    50% { transform: scaleX(1.2); }
    100% { transform: scaleX(1); }
  }

  .filter-indicators {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }

  .filter-graph {
    height: 60px;
    margin-top: 0.5rem;
    border-radius: 10px;
    background: rgba(0, 0, 0, 0.2);
    position: relative;
    overflow: hidden;
  }

  .filter-graph::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 100%;
  }

  .filter-graph.highpass::after {
    background: linear-gradient(to top, 
      transparent 0%, 
      rgba(255, 107, 107, 0.8) 100%);
    clip-path: polygon(0 100%, 100% 0, 100% 100%);
  }

  .filter-graph.lowpass::after {
    background: linear-gradient(to top, 
      transparent 0%, 
      rgba(79, 172, 254, 0.8) 100%);
    clip-path: polygon(0 0, 100% 100%, 0 100%);
  }

  /* Visualizer Containers */
  .visualizer-container {
    width: 100%;
    max-width: 1000px;
    height: 400px;
    margin-top: 2rem;
  }

  .dual-visualizers {
    width: 100%;
    max-width: 1200px;
    height: 500px;
    margin-top: 2rem;
  }

  /* Scroll Progress Indicator */
  .scroll-progress-indicator {
    position: fixed;
    right: 2rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 100;
  }

  .progress-track {
    width: 4px;
    height: 200px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
    position: relative;
  }

  .progress-fill {
    width: 100%;
    background: linear-gradient(to bottom, #667eea, #f093fb, #4facfe);
    border-radius: 2px;
    height: 0%;
    transition: height 0.1s ease;
  }

  .zone-markers {
    position: absolute;
    left: 10px;
    top: 0;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .marker {
    font-size: 0.75rem;
    white-space: nowrap;
    color: white;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .scroll-progress-indicator {
      right: 1rem;
    }
    
    .loop-info h2 {
      font-size: 2rem;
    }
    
    .filter-indicators {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
</style>

<script>
  import { DopplerScroll } from '../utils/DopplerScroll.js';
  import { TempoSync } from '../utils/TempoSync.js';
  import { SpatialAudio } from '../utils/SpatialAudio.js';
  
  // Initialize doppler scroll system
  const container = document.querySelector('[data-scroll-audio]');
  const loop1Audio = document.getElementById('loop1-audio');
  const loop2Audio = document.getElementById('loop2-audio');
  
  if (container && loop1Audio && loop2Audio) {
    const dopplerScroll = new DopplerScroll({
      transitionZone: 0.33,
      crossoverPoint: 0.5,
      dopplerIntensity: 0.3
    });
    
    // Load audio loops
    dopplerScroll.loadLoops(loop1Audio.src, loop2Audio.src).then(() => {
      // Start playback when ready
      dopplerScroll.play();
      
      // Update AWaves visualizers
      updateVisualizers(dopplerScroll);
    });
    
    // Update scroll progress indicator
    const progressFill = document.querySelector('.progress-fill');
    const updateProgress = () => {
      const scrollY = window.scrollY;
      const maxScroll = document.body.scrollHeight - window.innerHeight;
      const progress = Math.min(scrollY / maxScroll, 1);
      
      if (progressFill) {
        progressFill.style.height = `${progress * 100}%`;
      }
      
      // Update crossfade indicator in transition zone
      updateCrossfadeIndicator(progress);
    };
    
    window.addEventListener('scroll', updateProgress);
    updateProgress();
  }
  
  function updateCrossfadeIndicator(progress) {
    const loop1Bar = document.querySelector('.loop-1-bar');
    const loop2Bar = document.querySelector('.loop-2-bar');
    
    if (progress >= 0.33 && progress <= 0.66) {
      const transitionProgress = (progress - 0.33) / 0.33;
      
      if (loop1Bar && loop2Bar) {
        loop1Bar.style.width = `${(1 - transitionProgress) * 100}%`;
        loop2Bar.style.width = `${transitionProgress * 100}%`;
      }
    }
  }
  
  function updateVisualizers(dopplerScroll) {
    // Connect audio to AWaves visualizers
    const awavesLoop1 = document.getElementById('awaves-loop1');
    const awavesLoop2 = document.getElementById('awaves-loop2');
    const awavesTransition = document.getElementById('awaves-transition');
    
    // Listen for audio state changes
    dopplerScroll.emitter.on('scrollUpdate', (data) => {
      const { progress, zone, state } = data;
      
      // Update active visualizer based on zone
      if (zone === 'page1' && awavesLoop1) {
        awavesLoop1.setAttribute('data-audio-active', 'true');
        awavesLoop2?.setAttribute('data-audio-active', 'false');
        awavesTransition?.setAttribute('data-audio-active', 'false');
      } else if (zone === 'page3' && awavesLoop2) {
        awavesLoop1?.setAttribute('data-audio-active', 'false');
        awavesLoop2.setAttribute('data-audio-active', 'true');
        awavesTransition?.setAttribute('data-audio-active', 'false');
      } else if (zone === 'transition' && awavesTransition) {
        awavesLoop1?.setAttribute('data-audio-active', 'false');
        awavesLoop2?.setAttribute('data-audio-active', 'false');
        awavesTransition.setAttribute('data-audio-active', 'true');
      }
      
      // Update status indicators
      updateStatusIndicators(zone, progress);
    });
  }
  
  function updateStatusIndicators(zone, progress) {
    const statusIndicators = document.querySelectorAll('.audio-status');
    
    statusIndicators.forEach((indicator, index) => {
      const volumeLevel = indicator.querySelector('.volume-level');
      const filterStatus = indicator.querySelector('.filter-status');
      
      if (zone === 'transition') {
        const transitionProgress = (progress - 0.33) / 0.33;
        
        if (index === 0) { // Loop 1
          const volume = Math.round((1 - transitionProgress * 0.8) * 100);
          if (volumeLevel) volumeLevel.textContent = `${volume}%`;
          if (filterStatus) filterStatus.textContent = `Highpass ${Math.round(transitionProgress * 1000)}Hz`;
        } else if (index === 2) { // Loop 2
          const volume = Math.round(transitionProgress * 0.8 * 100);
          if (volumeLevel) volumeLevel.textContent = `${volume}%`;
          if (filterStatus) filterStatus.textContent = `Lowpass ${Math.round(20000 - transitionProgress * 15000)}Hz`;
        }
      }
    });
  }
  
  // Lenis smooth scroll integration
  if (window.lenis) {
    window.lenis.on('scroll', ({ scroll, limit, velocity, direction, progress }) => {
      // During transition zone, temporarily reduce smooth scroll
      const scrollProgress = progress;
      if (scrollProgress >= 0.33 && scrollProgress <= 0.66) {
        window.lenis.options.smoothWheel = 0.5;
      } else {
        window.lenis.options.smoothWheel = 1;
      }
    });
  }
</script>