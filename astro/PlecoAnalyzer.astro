---
/**
 * PlecoAnalyzer - Complete audio analysis component for Astro
 * Provides BPM detection, loop analysis, and interactive controls
 */

export interface Props {
  showBPM?: boolean;
  showLoopPoints?: boolean;
  showSpectral?: boolean;
  allowUpload?: boolean;
  autoAnalyze?: boolean;
  class?: string;
}

const { 
  showBPM = true, 
  showLoopPoints = true, 
  showSpectral = false,
  allowUpload = true,
  autoAnalyze = true,
  class: className = ''
} = Astro.props;
---

<div class={`pleco-analyzer ${className}`}>
  {allowUpload && (
    <div class="pleco-upload">
      <input type="file" id="plecoFileInput" accept="audio/*" />
      <label for="plecoFileInput">Choose Audio File</label>
    </div>
  )}
  
  <div class="pleco-results" id="plecoResults" style="display: none;">
    {showBPM && (
      <div class="pleco-bpm">
        <h3>BPM Detection</h3>
        <div class="bpm-value" id="bpmValue">--</div>
        <div class="bpm-confidence" id="bpmConfidence">--</div>
      </div>
    )}
    
    {showLoopPoints && (
      <div class="pleco-loops">
        <h3>Loop Analysis</h3>
        <div class="loop-info" id="loopInfo">--</div>
        <div class="loop-controls">
          <button id="playLoop">Play Loop</button>
          <button id="stopLoop">Stop</button>
        </div>
      </div>
    )}
    
    {showSpectral && (
      <div class="pleco-spectral">
        <h3>Spectral Analysis</h3>
        <div class="spectral-info" id="spectralInfo">--</div>
      </div>
    )}
  </div>
  
  <slot />
</div>

<style>
  .pleco-analyzer {
    border: 1px solid #333;
    border-radius: 8px;
    padding: 20px;
    background: #111;
    color: #fff;
    font-family: monospace;
  }
  
  .pleco-upload {
    margin-bottom: 20px;
  }
  
  .pleco-upload input[type="file"] {
    display: none;
  }
  
  .pleco-upload label {
    display: inline-block;
    padding: 10px 20px;
    background: #0066cc;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.2s;
  }
  
  .pleco-upload label:hover {
    background: #0052a3;
  }
  
  .pleco-results {
    display: grid;
    gap: 20px;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }
  
  .pleco-bpm, .pleco-loops, .pleco-spectral {
    background: #222;
    padding: 15px;
    border-radius: 4px;
  }
  
  .bpm-value {
    font-size: 2em;
    font-weight: bold;
    color: #00ff00;
  }
  
  .loop-controls {
    margin-top: 10px;
  }
  
  .loop-controls button {
    margin-right: 10px;
    padding: 8px 16px;
    background: #333;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .loop-controls button:hover {
    background: #555;
  }
  
  .loop-controls button.active {
    background: #0066cc;
  }
</style>

<script>
  import {
    detectBPM,
    librosaLoopAnalysis,
    computeSpectralCentroid,
    computeRMS,
    LoopPlayer
  } from 'pleco-xa';

  let currentPlayer = null;

  document.addEventListener('DOMContentLoaded', () => {
    const fileInput = document.getElementById('plecoFileInput');
    const resultsDiv = document.getElementById('plecoResults');
    const bpmValue = document.getElementById('bpmValue');
    const bpmConfidence = document.getElementById('bpmConfidence');
    const loopInfo = document.getElementById('loopInfo');
    const spectralInfo = document.getElementById('spectralInfo');
    const playBtn = document.getElementById('playLoop');
    const stopBtn = document.getElementById('stopLoop');

    if (fileInput) {
      fileInput.addEventListener('change', async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        try {
          // Load audio
          const audioContext = new (window.AudioContext || window.webkitAudioContext)();
          const arrayBuffer = await file.arrayBuffer();
          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

          // Analyze with Pleco Xa
          const audioData = audioBuffer.getChannelData(0);
          const bpmResult = detectBPM(audioData, audioBuffer.sampleRate);
          const analysis = await librosaLoopAnalysis(audioBuffer);
          
          // Update UI
          if (bpmValue && bpmConfidence) {
            bpmValue.textContent = `${bpmResult.bpm.toFixed(1)} BPM`;
            bpmConfidence.textContent = `Confidence: ${(bpmResult.confidence * 100).toFixed(1)}%`;
          }
          
          if (loopInfo) {
            const loopDuration = analysis.loopEnd - analysis.loopStart;
            loopInfo.innerHTML = `
              <div>Start: ${analysis.loopStart.toFixed(3)}s</div>
              <div>End: ${analysis.loopEnd.toFixed(3)}s</div>
              <div>Duration: ${loopDuration.toFixed(3)}s</div>
              <div>Musical: ${analysis.musicalDivision.toFixed(1)} bars</div>
            `;
          }
          
          if (spectralInfo) {
            const spectralCentroid = computeSpectralCentroid(audioBuffer);
            const rms = computeRMS(audioBuffer);
            spectralInfo.innerHTML = `
              <div>Spectral Centroid: ${spectralCentroid.toFixed(0)} Hz</div>
              <div>RMS Energy: ${rms.toFixed(4)}</div>
            `;
          }

          // Set up player
          currentPlayer = new LoopPlayer(audioBuffer);
          currentPlayer.setLoopPoints(analysis.loopStart, analysis.loopEnd);

          // Show results
          if (resultsDiv) {
            resultsDiv.style.display = 'block';
          }

          // Dispatch custom event for parent components
          const analysisEvent = new CustomEvent('plecoAnalysis', {
            detail: { bpmResult, analysis, audioBuffer }
          });
          document.dispatchEvent(analysisEvent);

        } catch (error) {
          console.error('Pleco analysis failed:', error);
        }
      });
    }

    // Play/stop controls
    if (playBtn) {
      playBtn.addEventListener('click', async () => {
        if (currentPlayer) {
          await currentPlayer.play();
          playBtn.classList.add('active');
          stopBtn?.classList.remove('active');
        }
      });
    }

    if (stopBtn) {
      stopBtn.addEventListener('click', () => {
        if (currentPlayer) {
          currentPlayer.stop();
          stopBtn.classList.add('active');
          playBtn?.classList.remove('active');
        }
      });
    }
  });
</script>
