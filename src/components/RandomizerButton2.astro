---
interface Props {
  audioBufferVar?: string;
  ctxVar?: string;
  applyLoopVar?: string;
}
const { audioBufferVar = 'currentAudioBuffer', ctxVar = 'audioContext', applyLoopVar = 'applyLoop' } = Astro.props

---

<button
  class="loop-btn"
  id="randomizeLoopBtn2"
  data-buffer-var={audioBufferVar}
  data-ctx-var={ctxVar}
  data-apply-loop-var={applyLoopVar}
>
  ðŸ”„ Reverse Heavy
</button>

<script>
  import { halfLoop, doubleLoop, moveForward, reverseBufferSection, resetLoop, detectLoop } from '../core/index.js';
  import { enqueueToast } from '../scripts/ui/toastQueue.js';
  
  function reverseHeavySequence(buffer, { steps = 41 } = {}) {
    let loop = detectLoop(buffer);
    const sequence = [];
    const minSamples = (10 / 1000) * buffer.sampleRate;
    
    // Heavy reverse bias - 50% reverse, rest split between other ops
    const actions = [
      { op: 'reverse', w: 50 },
      { op: 'move', w: 20 },
      { op: 'half', w: 15 },
      { op: 'double', w: 10 },
      { op: 'reset', w: 5 },
    ];
    const totalW = actions.reduce((s, { w }) => s + w, 0);
    
    for (let i = 0; i < steps; i++) {
      let r = Math.random() * totalW;
      let acc = 0;
      let action = 'reverse';
      for (const { op, w } of actions) {
        acc += w;
        if (r < acc) {
          action = op;
          break;
        }
      }
      
      const fn = () => {
        switch (action) {
          case 'half':
            if (loop.endSample - loop.startSample >= 2 * minSamples) {
              loop = halfLoop(loop);
            }
            break;
          case 'double':
            loop = doubleLoop(loop, buffer.length);
            break;
          case 'move': {
            const duration = loop.endSample - loop.startSample;
            const newStart = loop.startSample + duration;
            const newEnd = loop.endSample + duration;
            if (newEnd <= buffer.length) {
              loop = { startSample: newStart, endSample: newEnd };
            }
            break;
          }
          case 'reverse':
            buffer = reverseBufferSection(buffer, loop.startSample, loop.endSample);
            break;
          case 'reset':
            loop = resetLoop(buffer);
            break;
        }
        return { buffer, loop, op: action };
      };
      fn.op = action;
      sequence.push(fn);
    }
    
    return sequence;
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('randomizeLoopBtn2');
    btn?.addEventListener('click', async () => {
      const buffer = window[btn.dataset.bufferVar];
      const ctx = window[btn.dataset.ctxVar];
      const applyLoop = window[btn.dataset.applyLoopVar];
      if (!buffer || !ctx || typeof applyLoop !== 'function') return;
      const seq = reverseHeavySequence(buffer, { steps: 41 });
      enqueueToast('ðŸ”„ Reverse heavy: ' + seq.map(fn => fn.op).join(' â†’ '));
      let buf = buffer;
      for (const step of seq) {
        const { buffer: newBuf, loop } = step();
        buf = newBuf;
        applyLoop(buf, loop, step.op, undefined);
        await new Promise(r => setTimeout(r, 100));
      }
      enqueueToast('Reverse heavy sequence done');
    });
  });
</script>