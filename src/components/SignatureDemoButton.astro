---
interface Props {
  audioBuffer?: AudioBuffer;
  ctx?: AudioContext;
  applyLoop?: (buffer: AudioBuffer, loop: any, op: string | undefined, subOps?: any) => void;
}

const { audioBuffer = undefined, ctx = undefined, applyLoop = undefined } = Astro.props;
---
<button class="sig-demo" id="sigDemoBtn">
  ðŸš€ Signature Demo
</button>

<script>
  import { signatureDemo } from '../core/index.js';
  import { enqueueToast } from '../scripts/ui/toastQueue.js';

  async function runDemo() {
    const audioBuffer = window.currentAudioBuffer;
    const applyLoop = window.applyLoop;
    if (!audioBuffer || typeof applyLoop !== 'function') return;
    const steps = signatureDemo(audioBuffer);
    for (const { fn, op } of steps) {
      const { buffer: newBuf, loop } = fn();
      enqueueToast(op);
      applyLoop(newBuf, loop, op);
      await new Promise((r) => setTimeout(r, 400));
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('sigDemoBtn');
    btn?.addEventListener('click', () => {
      runDemo();
    });
  });
</script>


<style>
.sig-demo { margin-top: .5rem; padding: .4rem .8rem; background: var(--accent); }
</style>
