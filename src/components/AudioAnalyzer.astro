---
/** 
 * AudioAnalyzer - Audio analysis component with BPM detection and loop finding
 * Handles audio loading, analysis, and visualization
 */
interface Props {
  title?: string;
  showControls?: boolean;
  class?: string;
}

const { 
  title = 'Audio Analysis', 
  showControls = true,
  class: className = '' 
} = Astro.props;
---

<div class={`pleco-audio-analyzer ${className}`}>
  <div class="analyzer-header">
    <h3>{title}</h3>
  </div>

  <div class="sample-buttons">
    <button class="sample-btn" data-sample="12-8-Jazzy-Drumset-03.aif">
      Jazz Drums
    </button>
    <button class="sample-btn" data-sample="Bassline For Doppler Song - 11.aif">
      Bassline
    </button>
    <button class="sample-btn" data-sample="Drive Through Beat.aif">
      Drive Beat
    </button>
    <button class="sample-btn" data-sample="ui.m4a">UI Loop Test</button>
    <input type="file" id="audioFileInput" accept="audio/*" style="display: none;" />
    <button class="sample-btn" id="uploadBtn">üìÅ Upload Audio</button>
  </div>

  {showControls && (
    <div class="playback-controls">
      <button class="play-btn" id="playBtn">‚ñ∂Ô∏è Play</button>
      <button class="play-btn" id="stopBtn">‚èπÔ∏è Stop</button>
    </div>
  )}

  <div class="analysis-display">
    <div class="bpm-display">
      <div class="bpm-value" id="bpmValue">--</div>
      <div class="bpm-label">BPM</div>

      <div class="timeline-container">
        <div class="timeline-circle">
          <div class="timeline-hand" id="timelineHand"></div>
          <div class="timeline-center"></div>
          <div class="timeline-marker"></div>
        </div>
      </div>
    </div>

    <div class="waveform-container">
      <h3 class="waveform-title">Waveform & Loop Detection</h3>
      <canvas class="waveform-canvas" id="waveformCanvas" width="800" height="200"></canvas>
      <div class="loop-controls">
        <button class="loop-btn" id="detectLoopBtn">üîç Detect Loop</button>
        <button class="loop-btn" id="halfLoopBtn">¬Ω Half Loop</button>
        <button class="loop-btn" id="doubleLoopBtn">2√ó Double Loop</button>
        <button class="loop-btn" id="moveForwardBtn">‚Üí Move Forward</button>
        <button class="loop-btn" id="reverseLoopBtn">üîÑ Reverse Loop</button>
        <button class="loop-btn" id="resetPlayheadBtn">üìè Reset Playhead</button>
        <button class="loop-btn" id="resetLoopBtn">‚ôªÔ∏è Reset Loop</button>
      </div>
    </div>

    <div class="analysis-cards">
      <div class="analysis-card">
        <h4 class="card-title">Track Info</h4>
        <div class="card-value" id="trackName">No track loaded</div>
        <p class="card-description" id="trackStatus">Load a sample to begin</p>
      </div>

      <div class="analysis-card">
        <h4 class="card-title">Loop Status</h4>
        <div class="card-value" id="loopInfo">Full Track</div>
        <p class="card-description">Current loop boundaries</p>
      </div>

      <div class="analysis-card">
        <h4 class="card-title">Audio Format</h4>
        <div class="card-value" id="audioFormat">--</div>
        <p class="card-description">Decoded audio information</p>
      </div>
    </div>
  </div>

  <div id="errorDisplay"></div>

  <slot />
</div>

<style>
  .pleco-audio-analyzer {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    color: white;
  }

  .analyzer-header {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .sample-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .sample-btn {
    padding: 1rem 2rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 25px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .sample-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-3px);
  }

  .playback-controls {
    margin: 2rem 0;
    text-align: center;
  }

  .play-btn {
    padding: 1rem 2rem;
    background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
    border: none;
    border-radius: 25px;
    color: white;
    font-weight: 600;
    cursor: pointer;
    margin: 0 0.5rem;
  }

  .analysis-display {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  .bpm-display {
    text-align: center;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    padding: 1.5rem;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .bpm-value {
    font-size: 3rem;
    font-weight: 900;
    color: #ffd700;
    text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
    margin-bottom: 0.5rem;
    transition: all 0.1s ease-out;
    transform-origin: center;
  }

  .bpm-value.beat-pulse {
    transform: scale(1.15);
    color: #ff6b6b;
    text-shadow: 0 0 40px rgba(255, 107, 107, 0.8);
  }

  .bpm-label {
    font-size: 1.2rem;
    opacity: 0.8;
  }

  .timeline-container {
    position: relative;
    width: 150px;
    height: 150px;
  }

  .timeline-circle {
    width: 100%;
    height: 100%;
    border: 3px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    position: relative;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.05), transparent);
  }

  .timeline-hand {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 2px;
    height: 60px;
    background: linear-gradient(180deg, #ffd700, #ff6b6b);
    transform-origin: bottom;
    transform: translate(-50%, -100%) rotate(0deg);
    transition: transform 0.1s ease;
    border-radius: 2px;
  }

  .timeline-center {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 12px;
    height: 12px;
    background: #ffd700;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
  }

  .timeline-marker {
    position: absolute;
    top: 5px;
    left: 50%;
    width: 3px;
    height: 15px;
    background: #4ecdc4;
    transform: translateX(-50%);
    border-radius: 2px;
  }

  .waveform-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .waveform-title {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #ffd700;
    text-align: center;
  }

  .waveform-canvas {
    width: 100%;
    height: 200px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .loop-controls {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .loop-btn {
    padding: 0.8rem 1.5rem;
    background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
    border: none;
    border-radius: 25px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .loop-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
  }

  .analysis-cards {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .analysis-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 1.5rem;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .card-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #ffd700;
  }

  .card-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
    margin-bottom: 0.5rem;
  }

  .card-description {
    font-size: 0.8rem;
    opacity: 0.7;
    line-height: 1.4;
  }

  #errorDisplay {
    position: fixed;
    top: 20px;
    right: 20px;
    background: #ff4444;
    color: white;
    padding: 15px 20px;
    border-radius: 8px;
    z-index: 1000;
    max-width: 400px;
    display: none;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  }

  @media (max-width: 768px) {
    .analysis-display {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .bpm-value {
      font-size: 2.5rem;
    }
  }
</style>

<script>
  // Import core functionality
  import { 
    initAudioProcessor, 
    loadAudioFile,
    drawWaveform
  } from '../scripts/xa-audio-core.js';
  
  // Set up animation frame for continuous waveform updates
  let animationFrameId = null;
  
  // Import analysis modules
  import { detectBPM } from '../scripts/xa-bpm-detection.js';
  import { findLoop, manipulateLoop } from '../scripts/xa-loop-detection.js';
  
  // Initialize state
  let audioContext;
  let audioProcessor;
  let currentAudioBuffer = null;
  let isPlaying = false;
  
  // Initialize audio processor when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    try {
      // Initialize the audio processor
      audioProcessor = initAudioProcessor();
      
      // Set up event listeners
      setupEventListeners();
      
      console.log('‚úÖ Audio analyzer initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize audio analyzer:', error);
      showError(`Initialization error: ${error.message}`);
    }
  });
  
  // Set up all event listeners
  function setupEventListeners() {
    // Sample buttons
    document.querySelectorAll('.sample-btn').forEach((btn) => {
      btn.addEventListener('click', () => {
        if (btn.dataset.sample) {
          loadSampleFile(`/src/assets/audio/${btn.dataset.sample}`, btn.textContent);
        }
      });
    });
    
    // Upload button
    document.getElementById('uploadBtn')?.addEventListener('click', () => {
      document.getElementById('audioFileInput').click();
    });
    
    // File input
    document.getElementById('audioFileInput')?.addEventListener('change', async (e) => {
      const file = e.target.files[0];
      if (file) {
        try {
          updateTrackInfo(file.name, 'Loading...');
          
          // Load and analyze the file
          const result = await loadAudioFile(file);
          currentAudioBuffer = result.audioBuffer;
          audioContext = result.audioContext;
          
          // Update UI with file info
          updateTrackInfo(
            file.name,
            `${currentAudioBuffer.duration.toFixed(1)}s`
          );
          
          document.getElementById('audioFormat').textContent =
            `${currentAudioBuffer.sampleRate}Hz / ${currentAudioBuffer.numberOfChannels}ch`;
          
          // Analyze the audio (BPM detection)
          const bpmResult = await detectBPM(currentAudioBuffer);
          document.getElementById('bpmValue').textContent = bpmResult.bpm.toFixed(1);
          
          // Draw waveform with loop points
          drawWaveform(currentAudioBuffer, 'waveformCanvas', { start: 0, end: 1 });
          
          console.log('‚úÖ Audio loaded and analyzed');
        } catch (error) {
          console.error('‚ùå Error loading file:', error);
          showError(`Failed to load ${file.name}: ${error.message}`);
        }
      }
    });
    
    // Playback controls
    document.getElementById('playBtn')?.addEventListener('click', playAudio);
    document.getElementById('stopBtn')?.addEventListener('click', stopAudio);
    
    // Loop controls
    document.getElementById('detectLoopBtn')?.addEventListener('click', async () => {
      if (!currentAudioBuffer) return;
      
      try {
        const loopResult = await findLoop(currentAudioBuffer);
        audioProcessor.setLoopPoints(loopResult.start, loopResult.end);
        updateLoopInfo(loopResult);
        drawWaveform(currentAudioBuffer, 'waveformCanvas', loopResult);
      } catch (error) {
        showError(`Loop detection failed: ${error.message}`);
      }
    });
    
    // Other loop manipulation buttons
    document.getElementById('halfLoopBtn')?.addEventListener('click', () => 
      manipulateLoop('half', audioProcessor, currentAudioBuffer));
    
    document.getElementById('doubleLoopBtn')?.addEventListener('click', () => 
      manipulateLoop('double', audioProcessor, currentAudioBuffer));
    
    document.getElementById('moveForwardBtn')?.addEventListener('click', () => 
      manipulateLoop('forward', audioProcessor, currentAudioBuffer));
    
    document.getElementById('resetLoopBtn')?.addEventListener('click', () => 
      manipulateLoop('reset', audioProcessor, currentAudioBuffer));
  }
  
  // Load a sample audio file
  async function loadSampleFile(url, name) {
    try {
      updateTrackInfo(name, 'Loading...');
      
      // Load and analyze the file
      const result = await loadAudioFile(url);
      currentAudioBuffer = result.audioBuffer;
      audioContext = result.audioContext;
      
      // Update UI with file info
      updateTrackInfo(
        name,
        `${currentAudioBuffer.duration.toFixed(1)}s`
      );
      
      document.getElementById('audioFormat').textContent =
        `${currentAudioBuffer.sampleRate}Hz`;
      
      // Analyze the audio (BPM detection)
      const bpmResult = await detectBPM(currentAudioBuffer);
      document.getElementById('bpmValue').textContent = bpmResult.bpm.toFixed(1);
      
      // Draw waveform with loop points
      drawWaveform(currentAudioBuffer, 'waveformCanvas', { start: 0, end: 1 });
      
      console.log('‚úÖ Audio loaded and analyzed');
    } catch (error) {
      console.error('‚ùå Error loading audio:', error);
      showError(`Load error: ${error.message}`);
    }
  }
  
  // Play audio
  async function playAudio() {
    if (!currentAudioBuffer || !audioProcessor) {
      showError('No audio loaded');
      return;
    }
    
    try {
      if (isPlaying) {
        await audioProcessor.stop();
        isPlaying = false;
        document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è Play';
        stopWaveformAnimation();
        return;
      }
      
      await audioProcessor.play(currentAudioBuffer);
      isPlaying = true;
      document.getElementById('playBtn').textContent = '‚è∏Ô∏è Pause';
      
      // Start animations
      startTimelineAnimation();
      startWaveformAnimation();
    } catch (error) {
      showError(`Playback error: ${error.message}`);
    }
  }
  
  // Animate waveform with playhead
  function startWaveformAnimation() {
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
    }
    
    function animate() {
      if (!isPlaying || !currentAudioBuffer || !audioProcessor) return;
      
      // Get current playback position
      const position = audioProcessor.getCurrentPosition();
      const loopPoints = audioProcessor.getLoopPoints();
      
      // Draw waveform with playhead
      drawWaveform(currentAudioBuffer, 'waveformCanvas', loopPoints, {
        isPlaying: true,
        position: position
      });
      
      animationFrameId = requestAnimationFrame(animate);
    }
    
    animationFrameId = requestAnimationFrame(animate);
  }
  
  // Stop waveform animation
  function stopWaveformAnimation() {
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
      animationFrameId = null;
    }
    
    // Draw final frame without playhead
    if (currentAudioBuffer && audioProcessor) {
      drawWaveform(currentAudioBuffer, 'waveformCanvas', audioProcessor.getLoopPoints());
    }
  }
  
  // Stop audio
  function stopAudio() {
    if (audioProcessor) {
      audioProcessor.stop();
      isPlaying = false;
      document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è Play';
      stopWaveformAnimation();
    }
  }
  
  // Update track info in UI
  function updateTrackInfo(name, status) {
    document.getElementById('trackName').textContent = name;
    document.getElementById('trackStatus').textContent = status;
  }
  
  // Update loop info in UI
  function updateLoopInfo(loopData) {
    if (!currentAudioBuffer || !loopData) return;
    
    const startTime = loopData.start * currentAudioBuffer.duration;
    const endTime = loopData.end * currentAudioBuffer.duration;
    const duration = endTime - startTime;
    
    let loopText;
    if (loopData.start === 0 && loopData.end === 1) {
      loopText = 'Full Track';
    } else {
      loopText = `${duration.toFixed(2)}s (${startTime.toFixed(2)}s - ${endTime.toFixed(2)}s)`;
    }
    
    document.getElementById('loopInfo').textContent = loopText;
  }
  
  // Show error message
  function showError(message) {
    const errorDiv = document.getElementById('errorDisplay');
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
    
    setTimeout(() => {
      errorDiv.style.display = 'none';
    }, 5000);
  }
  
  // Timeline animation
  function startTimelineAnimation() {
    if (!isPlaying || !audioProcessor) return;
    
    const timelineHand = document.getElementById('timelineHand');
    const startTime = Date.now();
    const loopDuration = audioProcessor.getLoopDuration();
    
    function animateTimeline() {
      if (!isPlaying) return;
      
      const elapsed = (Date.now() - startTime) / 1000;
      const progress = (elapsed % loopDuration) / loopDuration;
      const rotation = progress * 360;
      
      timelineHand.style.transform = `translate(-50%, -100%) rotate(${rotation}deg)`;
      
      requestAnimationFrame(animateTimeline);
    }
    
    requestAnimationFrame(animateTimeline);
  }
</script>