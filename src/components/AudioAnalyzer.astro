---
/** 
 * AudioAnalyzer - Audio analysis component with BPM detection and loop finding
 * Handles audio loading, analysis, and visualization
 */
interface Props {
  title?: string;
  showControls?: boolean;
  class?: string;
}
import SignatureDemoButton from './SignatureDemoButton.astro';
import RandomizerButton from './RandomizerButton.astro';
import GlitchBurstButton from './GlitchBurstButton.astro';

const {
  title = 'Audio Analysis',
  showControls = true,
  class: className = ''
} = Astro.props;

let currentAudioBuffer = null;
let audioContext = null;
function applyLoop() {}

---

<div class={`pleco-audio-analyzer ${className}`}>
  <div class="analyzer-header">
    <h3>{title}</h3>
  </div>

  <div class="sample-buttons">
    <button class="sample-btn" data-sample="12-8-Jazzy-Drumset-03.aif">
      Jazz Drums
    </button>
    <button class="sample-btn" data-sample="Bassline For Doppler Song - 11.aif">
      Bassline
    </button>
    <button class="sample-btn" data-sample="Drive Through Beat.aif">
      Drive Beat
    </button>
    <button class="sample-btn" data-sample="ui.m4a">UI Loop Test</button>
    <input type="file" id="audioFileInput" accept="audio/*" style="display: none;" />
    <button class="sample-btn" id="uploadBtn">üìÅ Upload Audio</button>
  </div>

  {showControls && (
    <div class="playback-controls">
      <button class="play-btn" id="playBtn">‚ñ∂Ô∏è Play</button>
      <button class="play-btn" id="stopBtn">‚èπÔ∏è Stop</button>
    </div>
  )}

  <div class="analysis-display">
    <div class="bpm-display">
      <div class="bpm-value" id="bpmValue" aria-live="polite" tabindex="0">--</div>
      <div class="bpm-label">BPM</div>

      <label class="allow-toggle">
        <input type="checkbox" id="allowHalfDoubleToggle" checked />
        Allow Half/Double
      </label>

      <div class="timeline-container">
        <div class="timeline-circle">
          <div class="timeline-hand" id="timelineHand"></div>
          <div class="timeline-center"></div>
          <div class="timeline-marker"></div>
        </div>
      </div>
    </div>

    <div class="waveform-container">
      <h3 class="waveform-title">Waveform & Loop Detection</h3>
      <canvas class="waveform-canvas" id="waveformCanvas" width="800" height="200"></canvas>
      <progress id="analysisProgress" max="1" value="0" style="width:100%;display:none;margin-top:0.5rem;"></progress>
      <div class="loop-controls">
        <button class="loop-btn" id="detectLoopBtn">üîç Detect Loop</button>
        <button class="loop-btn" id="halfLoopBtn">¬Ω Half Loop</button>
        <button class="loop-btn" id="doubleLoopBtn">2√ó Double Loop</button>
        <button class="loop-btn" id="moveForwardBtn">‚Üí Move Forward</button>
        <button class="loop-btn" id="reverseLoopBtn">üîÑ Reverse Loop</button>
        <button class="loop-btn" id="resetPlayheadBtn">üìè Reset Playhead</button>
        <button class="loop-btn" id="resetLoopBtn">‚ôªÔ∏è Reset Loop</button>
      </div>
    </div>

    <div class="analysis-cards">
      <div class="analysis-card">
        <h4 class="card-title">Track Info</h4>
        <div class="card-value" id="trackName">No track loaded</div>
        <p class="card-description" id="trackStatus">Load a sample to begin</p>
        <RandomizerButton />
      </div>

      <div class="analysis-card">
        <h4 class="card-title">Loop Status</h4>
        <div class="card-value" id="loopInfo">Full Track</div>
        <p class="card-description">Current loop boundaries</p>
      </div>

      <div class="analysis-card">
        <h4 class="card-title">Audio Format</h4>
        <div class="card-value" id="audioFormat">--</div>
        <p class="card-description">Decoded audio information</p>
      </div>
      <SignatureDemoButton
        audioBuffer={currentAudioBuffer}
        ctx={audioContext}
        applyLoop={applyLoop}
      />

    </div>
  </div>


  <slot />
</div>

<style>
  .pleco-audio-analyzer {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    color: white;
  }

  .analyzer-header {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .sample-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .sample-btn {
    padding: 1rem 2rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 25px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .sample-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-3px);
  }

  .playback-controls {
    margin: 2rem 0;
    text-align: center;
  }

  .play-btn {
    padding: 1rem 2rem;
    background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
    border: none;
    border-radius: 25px;
    color: white;
    font-weight: 600;
    cursor: pointer;
    margin: 0 0.5rem;
  }

  .analysis-display {
    display: grid;
    grid-template-columns: 1fr minmax(0, 2fr) 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  .bpm-display {
    text-align: center;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    padding: 1.5rem;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .bpm-value {
    font-size: 3rem;
    font-weight: 900;
    color: #ffd700;
    text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
    margin-bottom: 0.5rem;
    transition: all 0.1s ease-out;
    transform-origin: center;
  }

  .bpm-value.beat-pulse {
    transform: scale(1.15);
    color: #ff6b6b;
    text-shadow: 0 0 40px rgba(255, 107, 107, 0.8);
  }

  .bpm-label {
    font-size: 1.2rem;
    opacity: 0.8;
  }

  .allow-toggle {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.9rem;
  }

  .timeline-container {
    position: relative;
    width: 150px;
    height: 150px;
  }

  .timeline-circle {
    width: 100%;
    height: 100%;
    border: 3px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    position: relative;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.05), transparent);
  }

  .timeline-hand {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 2px;
    height: 60px;
    background: linear-gradient(180deg, #ffd700, #ff6b6b);
    transform-origin: bottom;
    transform: translate(-50%, -100%) rotate(0deg);
    transition: transform 0.1s ease;
    border-radius: 2px;
  }

  .timeline-center {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 12px;
    height: 12px;
    background: #ffd700;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
  }

  .timeline-marker {
    position: absolute;
    top: 5px;
    left: 50%;
    width: 3px;
    height: 15px;
    background: #4ecdc4;
    transform: translateX(-50%);
    border-radius: 2px;
  }

  .waveform-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .waveform-title {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #ffd700;
    text-align: center;
  }

  .waveform-canvas {
    width: 100%;
    height: 200px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  #analysisProgress {
    width: 100%;
    height: 8px;
    margin-top: 0.5rem;
  }

  .loop-controls {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .loop-btn {
    padding: 0.8rem 1.5rem;
    background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
    border: none;
    border-radius: 25px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .loop-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
  }

  .analysis-cards {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .analysis-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 1.5rem;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .card-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #ffd700;
  }

  .card-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
    margin-bottom: 0.5rem;
  }

  .card-description {
    font-size: 0.8rem;
    opacity: 0.7;
    line-height: 1.4;
  }


  @media (max-width: 768px) {
    .analysis-display {
      grid-template-columns: minmax(0, 1fr);
      gap: 1rem;
    }

    .bpm-value {
      font-size: 2.5rem;
    }
  }
</style>

<script client:load>
  // Set up animation frame for continuous waveform updates
  let animationFrameId = null;
  
  // Dynamic imports for browser context
  let initAudioProcessor, loadAudioFile, drawWaveform;
  let applyLoopHelper;
  let detectBPM;
  let findLoop, manipulateLoop;
  let enqueueToast;
  
  // Load modules dynamically
  async function loadModules() {
    try {
      console.log('üîÑ Loading modules...');
      
      const coreModule = await import('../scripts/xa-audio-core.js');
      initAudioProcessor = coreModule.initAudioProcessor;
      loadAudioFile = coreModule.loadAudioFile;
      drawWaveform = coreModule.drawWaveform;
      console.log('‚úÖ Core module loaded');
      
      const applyLoopModule = await import('../scripts/ui/applyLoop.js');
      applyLoopHelper = applyLoopModule.applyLoop;
      console.log('‚úÖ ApplyLoop module loaded');
      
      const bpmModule = await import('../scripts/xa-bpm-detection.js');
      detectBPM = bpmModule.detectBPM;
      console.log('‚úÖ BPM module loaded');
      
      const loopModule = await import('../scripts/xa-loop-detection.js');
      findLoop = loopModule.findLoop;
      manipulateLoop = loopModule.manipulateLoop;
      console.log('‚úÖ Loop module loaded');
      
      const toastModule = await import('../scripts/ui/toastQueue.js');
      enqueueToast = toastModule.enqueueToast;
      console.log('‚úÖ Toast module loaded');
      
      console.log('‚úÖ All modules loaded successfully');
    } catch (error) {
      console.error('‚ùå Error loading modules:', error);
      throw error;
    }
  }

  // Worker for heavy analysis
  let analysisWorker = null;
  
  // Initialize state
  let audioProcessor;
  currentAudioBuffer = null;
  if (typeof window !== 'undefined') {
    window.currentAudioBuffer ||= null;
    window.audioContext ||= null;
  }
  let isPlaying = false;
  let currentBeats = []; // Store beat times from BPM detection
  let currentTrackName = '';
  let rawBPM = null;
  let allowHalfDouble = true;

  function normalizeBPM(bpm) {
    if (!allowHalfDouble) return bpm;
    if (bpm > 160) return bpm / 2;
    if (bpm < 80) return bpm * 2;
    return bpm;
  }

  
  // Initialize audio processor when DOM is ready
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Load modules first
      await loadModules();
      
      // Initialize the audio processor
      audioProcessor = initAudioProcessor();

      // Create analysis worker (disabled for now to debug)
      // analysisWorker = new Worker(new URL('../workers/analysisWorker.js', import.meta.url), { type: 'module' });
      console.log('‚ö†Ô∏è Analysis worker disabled for debugging');
      
      // Set up event listeners
      setupEventListeners();
      
      console.log('‚úÖ Audio analyzer initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize audio analyzer:', error);
      showError(`Initialization error: ${error.message}`);
    }
  });
  
  // Set up all event listeners
  function setupEventListeners() {
    // Sample buttons
    document.querySelectorAll('.sample-btn').forEach((btn) => {
      btn.addEventListener('click', () => {
        if (btn.dataset.sample) {
          loadSampleFile(`/audio/${btn.dataset.sample}`, btn.textContent);
        }
      });
    });
    
    // Upload button
    document.getElementById('uploadBtn')?.addEventListener('click', () => {
      document.getElementById('audioFileInput').click();
    });
    
    // File input
    document.getElementById('audioFileInput')?.addEventListener('change', async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        try {
          clearAnalysisDisplay();
          updateTrackInfo(file.name, 'Loading...');
          currentTrackName = file.name;

          // Load and analyze the file

          const result = await loadAudioFile(file);
          currentAudioBuffer = result.audioBuffer;
          window.currentAudioBuffer = currentAudioBuffer;
          audioContext = result.audioContext;
          window.currentAudioBuffer = currentAudioBuffer;

          window.audioContext = audioContext;
          // if (analysisWorker && result.arrayBuffer) {
          //   analysisWorker.postMessage(result.arrayBuffer);
          // }
          console.log('‚ö†Ô∏è Worker analysis disabled for debugging');
          
          // Update UI with file info
          updateTrackInfo(
            file.name,
            `${currentAudioBuffer.duration.toFixed(1)}s`
          );
          
          document.getElementById('audioFormat').textContent =
            `${currentAudioBuffer.sampleRate}Hz / ${currentAudioBuffer.numberOfChannels}ch`;
          
          // Fallback BPM detection if worker fails
          const bpmResult = await detectBPM(currentAudioBuffer);
          rawBPM = bpmResult.bpm;
          const normalized = normalizeBPM(rawBPM);
          window.currentBPM = normalized;
          document.getElementById('bpmValue').textContent = normalized.toFixed(1);

          // BPM and loop detection handled by worker; show placeholder
          document.getElementById('bpmValue').textContent = '...';
          
          // Draw waveform with loop points
          drawWaveform(currentAudioBuffer, 'waveformCanvas', { start: 0, end: 1 });
          
          console.log('‚úÖ Audio loaded and analyzed');
        } catch (error) {
          console.error('‚ùå Error loading file:', error);
          showError(`Failed to load ${file.name}: ${error.message}`);
        }
      }
    });
    
    // Playback controls
    document.getElementById('playBtn')?.addEventListener('click', playAudio);
    document.getElementById('stopBtn')?.addEventListener('click', stopAudio);
    
    // Loop controls
    document.getElementById('detectLoopBtn')?.addEventListener('click', async () => {
      if (!currentAudioBuffer) {
        showError('No audio loaded. Please load an audio file first.');
        return;
      }
      
      try {
        // Show loading state
        const detectBtn = document.getElementById('detectLoopBtn');
        const originalText = detectBtn.textContent;
        detectBtn.textContent = '‚è≥ Detecting...';
        detectBtn.disabled = true;
        
        // Force a small delay to ensure UI updates
        await new Promise(resolve => setTimeout(resolve, 50));
        
        // Run loop detection
        const loopResult = await findLoop(currentAudioBuffer, {
          bpmHint: parseFloat(document.getElementById('bpmValue').textContent) || 120
        });
        
        // Apply loop points
        audioProcessor.setLoopPoints(loopResult.start, loopResult.end);
        updateLoopInfo(loopResult);
        drawWaveform(currentAudioBuffer, 'waveformCanvas', loopResult);
        
        // Reset button state
        detectBtn.textContent = originalText;
        detectBtn.disabled = false;
        
        // Show success message
        showError('Loop detected successfully!');
      } catch (error) {
        document.getElementById('detectLoopBtn').textContent = 'üîç Detect Loop';
        document.getElementById('detectLoopBtn').disabled = false;
        showError(`Loop detection failed: ${error.message}`);
      }
    });
    
    // Other loop manipulation buttons
    document.getElementById('halfLoopBtn')?.addEventListener('click', () => {
      if (!currentAudioBuffer || !audioProcessor) return;
      const newLoop = manipulateLoop('half', audioProcessor, currentAudioBuffer);
      updateLoopInfo(newLoop);
      drawWaveform(currentAudioBuffer, 'waveformCanvas', newLoop);
    });
    
    document.getElementById('doubleLoopBtn')?.addEventListener('click', () => {
      if (!currentAudioBuffer || !audioProcessor) return;
      const newLoop = manipulateLoop('double', audioProcessor, currentAudioBuffer);
      updateLoopInfo(newLoop);
      drawWaveform(currentAudioBuffer, 'waveformCanvas', newLoop);
    });
    
    document.getElementById('moveForwardBtn')?.addEventListener('click', () => {
      if (!currentAudioBuffer || !audioProcessor) return;
      const newLoop = manipulateLoop('forward', audioProcessor, currentAudioBuffer);
      updateLoopInfo(newLoop);
      drawWaveform(currentAudioBuffer, 'waveformCanvas', newLoop);
    });
    
    document.getElementById('resetLoopBtn')?.addEventListener('click', () => {
      if (!currentAudioBuffer || !audioProcessor) return;
      const newLoop = manipulateLoop('reset', audioProcessor, currentAudioBuffer);
      updateLoopInfo(newLoop);
      drawWaveform(currentAudioBuffer, 'waveformCanvas', newLoop);
    });
    
    document.getElementById('resetPlayheadBtn')?.addEventListener('click', () => {
      if (!currentAudioBuffer || !audioProcessor) return;
      
      // Stop playback if playing
      if (isPlaying) {
        audioProcessor.stop();
        isPlaying = false;
        document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è Play';
        stopWaveformAnimation();
      }
      
      // Reset playhead to start of loop
      const loopPoints = audioProcessor.getLoopPoints();
      drawWaveform(currentAudioBuffer, 'waveformCanvas', loopPoints, {
        isPlaying: false,
        position: loopPoints.start
      });
    });
    
    document.getElementById('reverseLoopBtn')?.addEventListener('click', async () => {
      if (!currentAudioBuffer || !audioProcessor) return;

      try {
        // Get current loop points
        const loopPoints = audioProcessor.getLoopPoints();

        // Stop playback if playing
        const wasPlaying = isPlaying;
        if (isPlaying) {
          audioProcessor.stop();
          isPlaying = false;
          document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è Play';
          stopWaveformAnimation();
        }

        // Calculate sample offsets
        const startSample = Math.floor(loopPoints.start * currentAudioBuffer.length);
        const endSample = Math.floor(loopPoints.end * currentAudioBuffer.length);

        // Reverse the loop section using helper
        currentAudioBuffer = reverseBufferSection(currentAudioBuffer, startSample, endSample);
        window.currentAudioBuffer = currentAudioBuffer;

        // Apply changes to playback/UI
        applyLoop(currentAudioBuffer, { startSample, endSample }, 'reverse', undefined);

        // Resume playback if it was playing
        if (wasPlaying) {
          await audioProcessor.play(currentAudioBuffer);
          isPlaying = true;
          document.getElementById('playBtn').textContent = '‚è∏Ô∏è Pause';
          startTimelineAnimation();
          startWaveformAnimation();
        }

        showError('Loop section reversed successfully');
      } catch (error) {
        console.error('‚ùå Error reversing loop:', error);
        showError(`Failed to reverse loop: ${error.message}`);
      }
    });

    // ===== Waveform marker drag =====
    const canvas = document.getElementById('waveformCanvas');
    if (canvas) {
      canvas.addEventListener('mousedown', (e) => {
        if (!currentAudioBuffer || !audioProcessor) return;

        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const { start, end } = audioProcessor.getLoopPoints();
        const startX = start * canvas.width;
        const endX = end * canvas.width;

        if (Math.abs(x - startX) < 10) {
          isDraggingMarker = true;
          dragMarker = 'start';
        } else if (Math.abs(x - endX) < 10) {
          isDraggingMarker = true;
          dragMarker = 'end';
        }
      });

      canvas.addEventListener('mousemove', (e) => {
        if (!isDraggingMarker || !currentAudioBuffer || !audioProcessor) return;

        const rect = canvas.getBoundingClientRect();
        let pos = (e.clientX - rect.left) / canvas.width;
        pos = Math.min(1, Math.max(0, pos));

        let { start, end } = audioProcessor.getLoopPoints();
        if (dragMarker === 'start') {
          start = Math.min(pos, end - 0.01);
        } else if (dragMarker === 'end') {
          end = Math.max(pos, start + 0.01);
        }

        audioProcessor.setLoopPoints(start, end);
        updateLoopInfo({ start, end });

        drawWaveform(currentAudioBuffer, 'waveformCanvas', { start, end });
      });

      canvas.addEventListener('mouseup', () => {
        isDraggingMarker = false;
        dragMarker = null;
      });

      canvas.addEventListener('mouseleave', () => {
        isDraggingMarker = false;
        dragMarker = null;
      });
    }

    document.getElementById('allowHalfDoubleToggle')?.addEventListener('change', (e) => {
      allowHalfDouble = e.target.checked;
      if (rawBPM !== null) {
        const bpm = normalizeBPM(rawBPM);
        window.currentBPM = bpm;
        document.getElementById('bpmValue').textContent = bpm.toFixed(1);
      }
    });
  }
  
  // Load a sample audio file
  async function loadSampleFile(url, name) {
    try {
      console.log(`üéµ Loading sample: ${name} from ${url}`);
      
      // Disable all sample buttons during loading
      document.querySelectorAll('.sample-btn').forEach(btn => {
        btn.disabled = true;
        btn.style.opacity = '0.5';
      });

      clearAnalysisDisplay();
      updateTrackInfo(name, 'Loading...');
      document.getElementById('bpmValue').textContent = '...';
      
      // First load the audio file
      console.log('üìÅ Loading audio file...');
      const result = await loadAudioFile(url);
      currentAudioBuffer = result.audioBuffer;
      window.currentAudioBuffer = currentAudioBuffer;
      audioContext = result.audioContext;
      window.currentAudioBuffer = currentAudioBuffer;

      window.audioContext = audioContext;
      currentTrackName = name;
      // if (analysisWorker && result.arrayBuffer) {
      //   analysisWorker.postMessage(result.arrayBuffer);
      // }
      console.log('‚ö†Ô∏è Worker analysis disabled for debugging');
      
      // Update UI with file info immediately
      updateTrackInfo(
        name,
        `${currentAudioBuffer.duration.toFixed(1)}s`
      );
      
      document.getElementById('audioFormat').textContent =
        `${currentAudioBuffer.sampleRate}Hz`;
      
      // Draw waveform right away
      drawWaveform(currentAudioBuffer, 'waveformCanvas', { start: 0, end: 1 });
      
      // Re-enable buttons now that audio is loaded
      document.querySelectorAll('.sample-btn').forEach(btn => {
        btn.disabled = false;
        btn.style.opacity = '1';
      });
      
      // Worker will handle BPM and loop detection
      document.getElementById('bpmValue').textContent = '...';
      
      console.log('‚úÖ Audio loaded');
    } catch (error) {
      console.error('‚ùå Error loading audio:', error);
      showError(`Load error: ${error.message}`);
      
      // Re-enable buttons on error
      document.querySelectorAll('.sample-btn').forEach(btn => {
        btn.disabled = false;
        btn.style.opacity = '1';
      });
    }
  }
  
  // Play audio
  async function playAudio() {
    if (!currentAudioBuffer || !audioProcessor) {
      showError('No audio loaded');
      return;
    }
    
    try {
      if (isPlaying) {
        await audioProcessor.stop();
        isPlaying = false;
        document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è Play';
        stopWaveformAnimation();
        return;
      }
      
      await audioProcessor.play(currentAudioBuffer);
      isPlaying = true;
      document.getElementById('playBtn').textContent = '‚è∏Ô∏è Pause';
      
      // Start animations
      startTimelineAnimation();
      startWaveformAnimation();
    } catch (error) {
      showError(`Playback error: ${error.message}`);
    }
  }
  
  // Animate waveform with playhead and perform live BPM detection
  function startWaveformAnimation() {
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
    }
    
    let lastBeatTime = 0;
    let lastBPMUpdateTime = 0;
    let currentBeatIndex = 0;
    const beatInterval = window.currentBPM ? (60 / window.currentBPM) : 0.5; // Default to 120 BPM if not set
    const bpmUpdateInterval = 2.0; // Update BPM every 2 seconds
    
    function animate() {
      if (!isPlaying || !currentAudioBuffer || !audioProcessor) return;
      
      // Get current playback position
      const position = audioProcessor.getCurrentPosition();
      const loopPoints = audioProcessor.getLoopPoints();
      const currentTimeInSeconds = position * currentAudioBuffer.duration;
      
      // Draw waveform with playhead
      drawWaveform(currentAudioBuffer, 'waveformCanvas', loopPoints, {
        isPlaying: true,
        position: position
      });
      
      // Handle live BPM feedback with beat pulses and periodic updates
      if (audioContext) {
        const currentTime = audioContext.currentTime;
        
        // Pulse on beat using stored beat times if available
        if (currentBeats.length > 0) {
          // Determine loop boundaries in seconds
          const loopStartTime = loopPoints.start * currentAudioBuffer.duration;
          const loopEndTime = loopPoints.end * currentAudioBuffer.duration;
          const isLooping = loopStartTime < loopEndTime && loopEndTime <= currentAudioBuffer.duration;
          
          // Find current beat based on playback position
          if (isLooping) {
            // Adjust for looping: map current time to within loop bounds for beat checking
            if (currentTimeInSeconds >= loopStartTime && currentTimeInSeconds <= loopEndTime) {
              // Find beats within loop range
              if (currentBeatIndex >= currentBeats.length || currentBeats[currentBeatIndex] > loopEndTime) {
                currentBeatIndex = currentBeats.findIndex(t => t >= loopStartTime);
              }
            } else if (currentTimeInSeconds > loopEndTime) {
              // Reset to start of loop if past end
              currentBeatIndex = currentBeats.findIndex(t => t >= loopStartTime);
            }
          }
          
          while (currentBeatIndex < currentBeats.length) {
            const beatTime = currentBeats[currentBeatIndex];
            if (isLooping && (beatTime < loopStartTime || beatTime > loopEndTime)) {
              currentBeatIndex++;
              continue; // Skip beats outside loop range
            }
            if (currentTimeInSeconds >= beatTime - 0.05 && currentTimeInSeconds <= beatTime + 0.05) {
              const bpmElement = document.getElementById('bpmValue');
              if (bpmElement) {
                bpmElement.classList.add('beat-pulse');
                setTimeout(() => bpmElement.classList.remove('beat-pulse'), 100);
              }
              currentBeatIndex++;
              break;
            } else if (currentTimeInSeconds < beatTime - 0.05) {
              break; // Wait for next frame
            }
            currentBeatIndex++;
          }
          
          // Reset index if past relevant beats, considering loop
          if (currentBeatIndex >= currentBeats.length || (isLooping && currentBeats[currentBeatIndex] > loopEndTime)) {
            currentBeatIndex = currentBeats.findIndex(t => t >= loopStartTime);
            if (currentBeatIndex === -1) {
              currentBeatIndex = 0;
            }
          }
        } else if (window.currentBPM && currentTime - lastBeatTime >= beatInterval) {
          // Fallback to interval-based pulsing if no beat data
          const bpmElement = document.getElementById('bpmValue');
          if (bpmElement) {
            bpmElement.classList.add('beat-pulse');
            setTimeout(() => bpmElement.classList.remove('beat-pulse'), 100);
          }
          lastBeatTime = currentTime;
        }
        
        // Periodically update BPM with windowed analysis
        if (currentTime - lastBPMUpdateTime >= bpmUpdateInterval) {
          // Calculate current sample position
          const currentSample = Math.floor(position * currentAudioBuffer.length);
          // Perform windowed BPM detection (use a 4-second window)
          detectBPMWindow(currentAudioBuffer, currentSample, 4.0).then(result => {
            rawBPM = result.bpm;
            const bpm = normalizeBPM(rawBPM);
            window.currentBPM = bpm;
            document.getElementById('bpmValue').textContent = bpm.toFixed(1);
            console.log('‚úÖ Live BPM updated:', bpm);
          }).catch(error => {
            console.error('‚ùå Live BPM update error:', error);
          });
          lastBPMUpdateTime = currentTime;
        }
      }
      
      animationFrameId = requestAnimationFrame(animate);
    }
    
    animationFrameId = requestAnimationFrame(animate);
  }
  
  // Stop waveform animation
  function stopWaveformAnimation() {
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
      animationFrameId = null;
    }
    
    // Draw final frame without playhead
    if (currentAudioBuffer && audioProcessor) {
      drawWaveform(currentAudioBuffer, 'waveformCanvas', audioProcessor.getLoopPoints());
    }
  }
  
  // Stop audio
  function stopAudio() {
    if (audioProcessor) {
      audioProcessor.stop();
      isPlaying = false;
      document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è Play';
      stopWaveformAnimation();
    }
  }
  
  // Update track info in UI
  function updateTrackInfo(name, status) {
    document.getElementById('trackName').textContent = name;
    document.getElementById('trackStatus').textContent = status;
  }
  
  // Update loop info in UI
  function updateLoopInfo(loopData) {
    if (!currentAudioBuffer || !loopData) return;

    const startTime = loopData.start * currentAudioBuffer.duration;
    const endTime = loopData.end * currentAudioBuffer.duration;
    const duration = endTime - startTime;

    const reverseBtn = document.getElementById('reverseLoopBtn');

    let loopText;
    if (loopData.start === 0 && loopData.end === 1) {
      loopText = 'Full Track';
      if (reverseBtn) reverseBtn.disabled = true;
    } else {
      loopText = `${duration.toFixed(2)}s (${startTime.toFixed(2)}s - ${endTime.toFixed(2)}s)`;
      if (reverseBtn) reverseBtn.disabled = false;
    }

    document.getElementById('loopInfo').textContent = loopText;
  }

  // Clear BPM, waveform canvas and loop markers
  function clearAnalysisDisplay() {
    const bpmEl = document.getElementById('bpmValue');
    if (bpmEl) bpmEl.textContent = '--';

    const canvas = document.getElementById('waveformCanvas');
    if (canvas) {
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    document.getElementById('loopInfo').textContent = 'Full Track';
    audioProcessor?.setLoopPoints(0, 1);
  }
  
  // Show error message
  function showError(message) {
    enqueueToast(message, 5000);
  }

  function showStatus(message) {
    enqueueToast(message, 2000);
  }

  // Timeline animation
  function startTimelineAnimation() {
    if (!isPlaying || !audioProcessor) return;
    
    const timelineHand = document.getElementById('timelineHand');
    const startTime = Date.now();
    const loopDuration = audioProcessor.getLoopDuration();
    
    function animateTimeline() {
      if (!isPlaying) return;
      
      const elapsed = (Date.now() - startTime) / 1000;
      const progress = (elapsed % loopDuration) / loopDuration;
      const rotation = progress * 360;
      
      timelineHand.style.transform = `translate(-50%, -100%) rotate(${rotation}deg)`;
      
      requestAnimationFrame(animateTimeline);
    }
    
    requestAnimationFrame(animateTimeline);
  }

  // Wrapper using shared helper
  function applyLoop(buf, loop, op, subOps) {
    applyLoopHelper(buf, loop, op, subOps, {
      audioProcessor,
      drawWaveform,
      updateLoopInfo,
      updateTrackInfo,
      currentTrackName: currentTrackName || '',
      setCurrentBuffer: (b) => {
        currentAudioBuffer = b
        window.currentAudioBuffer = b
      },
      restart: isPlaying,
      startTimelineAnimation,
      startWaveformAnimation,
    })

  }
  window.applyLoop = applyLoop;
</script>
