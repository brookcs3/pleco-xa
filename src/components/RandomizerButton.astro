---
interface Props {
  audioBuffer: AudioBuffer | null;
  ctx: AudioContext | null;
  applyLoop?: Function;
}
import { applyLoop as applyLoopHelper } from '../scripts/ui/applyLoop.js'
const { audioBuffer, ctx, applyLoop = applyLoopHelper } = Astro.props

---

<button class="loop-btn" id="randomizeLoopBtn">ðŸŽ² Randomize Loop</button>

<script define:vars={{ audioBuffer, ctx, applyLoop }}>
  import { randomSequence } from '../core/loopPlayground.js';
  import { enqueueToast } from '../scripts/ui/toastQueue.js';
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('randomizeLoopBtn');
    btn?.addEventListener('click', async () => {
      if (!audioBuffer || !ctx || typeof applyLoop !== 'function') return;
      const seq = randomSequence(audioBuffer, {
        minMs: 10,
        maxMs: audioBuffer.duration * 1000,
        steps: 4
      });
      enqueueToast(seq.map(fn => fn.op || fn.action).join(' -> '));
      let buf = audioBuffer;
      for (const step of seq) {
        const { buffer: newBuf, loop } = step();
        buf = newBuf;
        applyLoop(buf, loop, step.op || step.action);
        await new Promise(r => setTimeout(r, 500));
      }
      enqueueToast('Randomization done');
    });
  });
</script>

